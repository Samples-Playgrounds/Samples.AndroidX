<#@ template language="C#" hostspecific="True"
#><#@ assembly name="System.Core"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Text.RegularExpressions"
#><#@ import namespace="System.Linq"
#>using System.Linq;
using Realms;
using Toggl.Storage.Models;
using Toggl.Storage.Realm.Models;

namespace Toggl.Storage.Realm
{
<#
    var filePath = Path.GetDirectoryName(Host.TemplateFile);
    var solutionDirectory = Path.Combine(filePath, "../../Toggl.Shared/Models/" );
    var modelsToGenerate = Directory.GetFiles(solutionDirectory, "*.cs");
    var isFirst = true;

    foreach(var modelFile in modelsToGenerate)
    {
        var interfaceName = Path.GetFileName(modelFile).Replace(".cs", "");
        if (interfaceName == "IIdentifiable"
            || interfaceName == "IDeletable"
            || interfaceName == "ILastChangedDatable")
            continue;

        var className = interfaceName.Substring(1, interfaceName.Length - 1);
        var realmClassName = $"Realm{className}";

        var databaseInterfaceName = $"IDatabase{className}";
        var databaseInterfaceFileName = Path.Combine(filePath, "../../Toggl.Storage/Models/", databaseInterfaceName + ".cs");
        var databaseInterfaceExists = File.Exists(databaseInterfaceFileName);

        var implementsIIdentifiable = File.ReadAllLines(modelFile).Any(l => l.Contains("IIdentifiable"));

        var implementsIDatabaseSyncable = databaseInterfaceExists
            && File.ReadAllLines(databaseInterfaceFileName).Any(l => l.Contains("IDatabaseSyncable"));

        var implementsILastChangedDatabale = File.ReadAllLines(modelFile).Any(l => l.Contains("ILastChangedDatable"));

        var implementsIDeletable = File.ReadAllLines(modelFile).Any(l => l.Contains("IDeletable"));

        if (!databaseInterfaceExists) continue;

        var updatesFromInterface = databaseInterfaceExists ? databaseInterfaceName : interfaceName;

        var hasModifiableId = implementsIDatabaseSyncable && implementsIIdentifiable;

        if (!isFirst)
            WriteLine("");

        foreach(var line in File.ReadAllLines(modelFile))
        {
            var isStartOfClass = line.Contains($" interface {interfaceName}");
            if (isStartOfClass)
            {
                var interfaces = $"IUpdatesFrom<{updatesFromInterface}>";
                if (hasModifiableId)
                    interfaces += ", IModifiableId";

                WriteLine($"    internal partial class {realmClassName} : {interfaces}");
                WriteLine( "    {");

                if (implementsIIdentifiable)
                {
                    WriteLine( "        public long Id { get; set; }\n");
                }

                if (implementsIDatabaseSyncable)
                {
                    if (hasModifiableId)
                    {
                        WriteLine("        public long? OriginalId { get; set; }\n");
                    }

                    WriteLine( "        public bool IsDeleted { get; set; }\n");
                    WriteLine( "        public int SyncStatusInt { get; set; }\n");
                    WriteLine( "        [Ignored]");
                    WriteLine( "        public SyncStatus SyncStatus");
                    WriteLine( "        {");
                    WriteLine( "            get { return (SyncStatus)SyncStatusInt; }");
                    WriteLine( "            set { SyncStatusInt = (int)value; }");
                    WriteLine( "        }\n");
                    WriteLine( "        public string LastSyncErrorMessage { get; set; }\n");
                }

                WriteLine($"        public {realmClassName}() {{ }}\n");

                WriteLine($"        public {realmClassName}({updatesFromInterface} entity, Realms.Realm realm)");
                WriteLine( "        {");
                
                if (implementsIIdentifiable)
                {
                    WriteLine( "            Id = entity.Id;");
                }
                
                WriteLine( "            SetPropertiesFrom(entity, realm);");
                WriteLine( "        }\n");

                if (hasModifiableId)
                {
                    WriteLine("        public void ChangeId(long id)");
                    WriteLine("        {");
                    WriteLine("            Id = id;");
                    WriteLine("        }\n");
                }

                WriteLine($"        public void SetPropertiesFrom({updatesFromInterface} entity, Realms.Realm realm)");
                WriteLine( "        {");

                if (implementsILastChangedDatabale)
                {
                    WriteLine("            At = entity.At;");
                }

                if (implementsIDeletable)
                {
                    WriteLine("            ServerDeletedAt = entity.ServerDeletedAt;");
                }

                if (implementsIDatabaseSyncable)
                {
                    WriteLine("            IsDeleted = entity.IsDeleted;");
                    WriteLine("            SyncStatus = entity.SyncStatus;");
                    WriteLine("            LastSyncErrorMessage = entity.LastSyncErrorMessage;");
                }

                continue;
            }

            var trimmedLine = line.Trim();

            var isProperty = line.Contains("get;");
            if (!isProperty) continue;

            var isEnumerable = trimmedLine.StartsWith("IEnumerable<");
            var isListOfRealmProperties = isEnumerable && Regex.IsMatch(line, "Ids ") && !line.Contains("Default");
            var isListOfNestedRealmEntities = isEnumerable && !Regex.IsMatch(line, "Ids ") && !line.Contains("Default");
            if (isEnumerable && !isListOfRealmProperties && !isListOfNestedRealmEntities) continue;

            var isRealmProperty = Regex.IsMatch(line, ".Id ")
                && !Regex.IsMatch(line, "^[ ]*[^ ]+Id ") // the type itself (the first token) must not end with "Id"
                && !line.Contains("Default");
            var indexOfPropName = trimmedLine.IndexOf(" ") + 1;
            var propName = trimmedLine.Substring(indexOfPropName, trimmedLine.Length - 9 - indexOfPropName);
            var assignment = $"entity.{propName}";

            if (isRealmProperty)
            {
                var entityName = propName.Replace("Id", "");
                WriteLine($"            var skip{entityName}Fetch = entity?.{entityName}Id == null || entity.{entityName}Id == 0;");

                propName = $"Realm{entityName}";
                assignment = $"skip{entityName}Fetch ? null : realm.All<{propName}>().Single(x => x.Id == entity.{entityName}Id || x.OriginalId == entity.{entityName}Id)";
            }

            if (isListOfRealmProperties)
            {
                var entityName = propName.Replace("Ids", "");

                var realmModelName = $"Realm{entityName}";
                var realmPropName = $"Realm{entityName}s";
                WriteLine($"            {realmPropName}.Clear();");
                WriteLine($"            if (entity.{propName} != null)");
                WriteLine( "            {");
                WriteLine($"                var all{realmPropName} = entity.{propName}.Select(id => realm.All<{realmModelName}>().Single(x => x.Id == id || x.OriginalId == id));");
                WriteLine($"                foreach (var oneOf{realmPropName} in all{realmPropName})");
                WriteLine($"                    {realmPropName}.Add(oneOf{realmPropName});");
                WriteLine( "            }");
                continue;
            }

            if (isListOfNestedRealmEntities)
            {
                var networkClassName = Regex.Match(line, "IEnumerable<I(?<class>[^>]+?)>").Groups["class"].Value;
                var collectionClassName = $"Realm{networkClassName}";
                var databaseClassName = $"Foundation.Models.{networkClassName}";
                var collectionPropName = $"{collectionClassName}s";
                WriteLine($"            {collectionPropName}.Clear();");
                WriteLine($"            foreach (var oneOf{propName} in entity.{propName})");
                WriteLine( "            {");
                WriteLine($"                var oneOfRealm{propName} = {collectionClassName}.FindOrCreate(oneOf{propName}, realm);");
                WriteLine($"                {collectionPropName}.Add(oneOfRealm{propName});");
                WriteLine( "            }");
                continue;
            }

            WriteLine($"            {propName} = {assignment};");
        }

        WriteLine("        }");
        WriteLine("    }");

        isFirst = false;
    }
#>}
